version: '3.8'

services:
  # 核心数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER-root}
      POSTGRES_PASSWORD: ${DB_PASSWORD-password}
      POSTGRES_DB: ${DB_NAME-d1}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 数据库管理面板
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD-adminpassword}
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # 缓存服务
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - backend

  # 无代码平台
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    environment:
      NC_DB: "pg://postgres:5432?u=${DB_USER}&p=${DB_PASSWORD}&d=${DB_NAME}"
      NC_AUTH_JWT_SECRET: ${JWT_SECRET}
      NC_PUBLIC_URL: http://localhost:8080
    ports:
      - "8080:8080"
    volumes:
      - nocodb_data:/usr/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # 自动化平台
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: ${DB_NAME}
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: ${DB_USER}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      N8N_ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      QUEUE_HEALTH_CHECK_ACTIVE: true
      GENERIC_TIMEZONE: Asia/Shanghai
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # 向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    command:
      - "./qdrant"
      - "--storage-snapshot-distance=500"

volumes:
  postgres_data:
  redis_data:
  nocodb_data:
  n8n_data:
  qdrant_data:

networks:
  backend:
    driver: bridge
    attachable: true
